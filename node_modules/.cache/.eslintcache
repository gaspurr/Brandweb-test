[{"/Users/gaspar/Desktop/Work/Assignments/Brandweb-test/src/index.js":"1","/Users/gaspar/Desktop/Work/Assignments/Brandweb-test/src/App.js":"2","/Users/gaspar/Desktop/Work/Assignments/Brandweb-test/src/Components/MainPage.js":"3","/Users/gaspar/Desktop/Work/Assignments/Brandweb-test/src/Components/Navbar.js":"4","/Users/gaspar/Desktop/Work/Assignments/Brandweb-test/src/Components/SearchBar.js":"5"},{"size":154,"mtime":1643562212228,"results":"6","hashOfConfig":"7"},{"size":436,"mtime":1643574478017,"results":"8","hashOfConfig":"7"},{"size":3896,"mtime":1643582263327,"results":"9","hashOfConfig":"7"},{"size":746,"mtime":1643575052301,"results":"10","hashOfConfig":"7"},{"size":1850,"mtime":1643583417534,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"1xm1naz",{"filePath":"15","messages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"14"},{"filePath":"20","messages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22","usedDeprecatedRules":"14"},{"filePath":"23","messages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25"},"/Users/gaspar/Desktop/Work/Assignments/Brandweb-test/src/index.js",[],["26","27"],"/Users/gaspar/Desktop/Work/Assignments/Brandweb-test/src/App.js",[],"/Users/gaspar/Desktop/Work/Assignments/Brandweb-test/src/Components/MainPage.js",["28"],"import React, { useEffect, useState } from 'react';\nimport axios from \"axios\"\nimport {\n    Button,\n    Container,\n    Row,\n    Col,\n    Card,\n    Pagination\n} from \"react-bootstrap\"\n\nfunction MainPage() {\n    const [gameCards, setGameCards] = useState([])\n\n        //I should use usememo here\n    const fetchCards = async () => {\n        await axios.get(`http://localhost:8080/games`)\n            .then(res => {\n                setGameCards(...gameCards, res.data)\n            }).catch(e => {\n                console.log(e)\n            })\n    }\n\n    useEffect(() => {\n        fetchCards()\n    }, []);\n\n\n\n    return (\n        <Container>\n            <h1>Games</h1>\n            <Row xxl={7} xl={4}  lg={4} md={3} sm={2} s>\n                {\n                    gameCards.length > 0 ? gameCards.map((game) => {\n\n                        return (\n                            <Col key={game.id} >\n                                <Card style={{\n                                    minWidth: \"10vh\",\n                                    width: \"100%\",\n                                    marginBottom: \"1rem\",\n                                    maxHeight: \"68vh\",\n                                    height: \"100%\"\n\n                                }}>\n                                    <Card.Img variant=\"top\" style={{ minHeight: \"20vh\", minWidth: \"24vh\", maxHeight: \"22vh\", width: \"100%\" }} src={game.background_image} alt=\"Game image\" />\n                                    <Card.Body style={{ alignItems: \"space-between\", display: \"grid\" }}>\n                                        <h5 className=\"card-title\">{game.name}</h5>\n                                        <Card.Text className=\"card-text\">Rating: {game.rating}</Card.Text>\n                                        <Card.Text>\n                                            {game[\"genres\"].map((genre) => {\n                                                return <span style={{\n                                                    background: \"lightgrey\",\n                                                    width: \"100%\",\n                                                    margin: \"0px 5px 0px 0px\",\n                                                    borderRadius: \"5px\",\n                                                    padding: \"2px 4px 2px 4px\",\n                                                }} key={genre.id}>{genre.name}</span>\n                                            })}\n                                        </Card.Text>\n                                        <Card.Text style={{ fontSize: \"0.8rem\", color: \"grey\" }}>Last updated: {game.updated.slice(0, 10)}</Card.Text>\n                                        <Card.Text >{game.description}</Card.Text>\n                                        <Button variant=\"primary\">See details</Button>\n                                    </Card.Body>\n                                </Card>\n                            </Col>\n                        )\n                    }) : null\n                }\n            </Row>\n            <p>This pagination below here doesn't work yet....</p>\n            <Pagination style={{ justifyContent: \"center\", marginTop: \"10vh\" }}>\n\n                <Pagination.First />\n                <Pagination.Prev />\n                <Pagination.Item>{1}</Pagination.Item>\n                <Pagination.Ellipsis />\n\n                <Pagination.Item>{10}</Pagination.Item>\n                <Pagination.Item>{11}</Pagination.Item>\n                <Pagination.Item active>{12}</Pagination.Item>\n                <Pagination.Item>{13}</Pagination.Item>\n                <Pagination.Item disabled>{14}</Pagination.Item>\n\n                <Pagination.Ellipsis />\n                <Pagination.Item>{20}</Pagination.Item>\n                <Pagination.Next />\n                <Pagination.Last />\n            </Pagination>\n\n\n        </Container>\n    )\n}\n\nexport default MainPage;\n","/Users/gaspar/Desktop/Work/Assignments/Brandweb-test/src/Components/Navbar.js",["29","30"],"import React from 'react'\nimport { InputForm, Form } from 'react-bootstrap'\nimport { NavLink } from 'react-router-dom'\nimport \"./Navbar.css\"\nimport SearchBar from './SearchBar'\n\nfunction Navbar() {\n    return (\n        <div>\n            <nav className=\"navbar\">\n                <div className=\"navbar-container\">\n                    <NavLink to=\"/\" className=\"nav-logo\">\n                        Brandweb\n                    </NavLink>\n                    <ul className=\"nav-menu\">\n                        <li className=\"nav-item\">\n                            <SearchBar placeholder=\"Look up a game\" />\n                        </li>\n                    </ul>\n                </div>\n            </nav>\n\n        </div>\n    )\n}\n\nexport default Navbar","/Users/gaspar/Desktop/Work/Assignments/Brandweb-test/src/Components/SearchBar.js",["31","32","33"],"import React, { useState, useEffect } from 'react';\nimport { Container, Form } from 'react-bootstrap';\nimport axios from \"axios\"\nimport \"./SearchBar.css\"\n\nfunction SearchBar({ placeholder }) {\n\n    const [results, setResults] = useState([])\n    const [input, setInput] = useState([])\n\n    //I should use usememo here\n    const fetchSearchQueries = async () => {\n        await axios.get('http://localhost:8080/games/names')\n            .then(res => {\n                setResults(...results, res.data)\n            }).catch(e => {\n                console.log(e)\n            })\n    }\n\n    const handleFiltering = (e) => {\n        const searchWord = e.target.value\n        const filter = results.filter((value) => {\n            return value.name.toLowerCase().includes(searchWord.toLowerCase())\n        })\n\n        if (searchWord === 0 || null) {\n            setInput([])\n        } else {\n            setInput(filter)\n        }\n\n        console.log(searchWord)\n    }\n\n\n\n    useEffect(() => {\n        fetchSearchQueries()\n    }, [])\n    return (\n        <Container>\n            <Container>\n                <Form.Label htmlFor=\"Searchbar\" />\n                <Form.Control\n                    type=\"text\"\n                    id=\"search-query\"\n                    placeholder={placeholder}\n                    onChange={(e) => { handleFiltering(e) }}\n                />\n            </Container>\n            {input.length > 0 ?\n                <Container className=\"search-results\">\n                    {input.length != 0 ? input.map((game) => {\n                        return (\n                            <a key={game._id} className=\"result-item\" href=\"#\" target=\"_blank\">{game.name}</a>\n                        )\n\n                    }) : null}\n                </Container>\n                : null}\n\n\n\n        </Container>\n    )\n\n}\n\nexport default SearchBar;\n",{"ruleId":"34","replacedBy":"35"},{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","severity":1,"message":"39","line":27,"column":8,"nodeType":"40","endLine":27,"endColumn":10,"suggestions":"41"},{"ruleId":"42","severity":1,"message":"43","line":2,"column":10,"nodeType":"44","messageId":"45","endLine":2,"endColumn":19},{"ruleId":"42","severity":1,"message":"46","line":2,"column":21,"nodeType":"44","messageId":"45","endLine":2,"endColumn":25},{"ruleId":"38","severity":1,"message":"47","line":40,"column":8,"nodeType":"40","endLine":40,"endColumn":10,"suggestions":"48"},{"ruleId":"49","severity":1,"message":"50","line":54,"column":35,"nodeType":"51","messageId":"52","endLine":54,"endColumn":37},{"ruleId":"53","severity":1,"message":"54","line":56,"column":29,"nodeType":"55","endLine":56,"endColumn":96},"no-native-reassign",["56"],"no-negated-in-lhs",["57"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchCards'. Either include it or remove the dependency array.","ArrayExpression",["58"],"no-unused-vars","'InputForm' is defined but never used.","Identifier","unusedVar","'Form' is defined but never used.","React Hook useEffect has a missing dependency: 'fetchSearchQueries'. Either include it or remove the dependency array.",["59"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-global-assign","no-unsafe-negation",{"desc":"60","fix":"61"},{"desc":"62","fix":"63"},"Update the dependencies array to be: [fetchCards]",{"range":"64","text":"65"},"Update the dependencies array to be: [fetchSearchQueries]",{"range":"66","text":"67"},[596,598],"[fetchCards]",[1022,1024],"[fetchSearchQueries]"]