[{"/Users/gaspar/Desktop/Work/Assignments/Brandweb-test/src/index.js":"1","/Users/gaspar/Desktop/Work/Assignments/Brandweb-test/src/App.js":"2","/Users/gaspar/Desktop/Work/Assignments/Brandweb-test/src/Components/MainPage.js":"3","/Users/gaspar/Desktop/Work/Assignments/Brandweb-test/src/Components/Navbar.js":"4","/Users/gaspar/Desktop/Work/Assignments/Brandweb-test/src/Components/SearchBar.js":"5","/Users/gaspar/Desktop/Work/Assignments/Brandweb-test/src/Components/DetailedView.js":"6","/Users/gaspar/Desktop/Work/Assignments/Brandweb-test/src/env.js":"7","/Users/gaspar/Desktop/Work/Assignments/Brandweb-test/src/Components/Footer.js":"8"},{"size":156,"mtime":1643755018125,"results":"9","hashOfConfig":"10"},{"size":643,"mtime":1643752435377,"results":"11","hashOfConfig":"10"},{"size":4651,"mtime":1643754168451,"results":"12","hashOfConfig":"10"},{"size":746,"mtime":1643575052301,"results":"13","hashOfConfig":"10"},{"size":2274,"mtime":1643755088176,"results":"14","hashOfConfig":"10"},{"size":5175,"mtime":1643755320516,"results":"15","hashOfConfig":"10"},{"size":57,"mtime":1643730319365,"results":"16","hashOfConfig":"10"},{"size":1074,"mtime":1643755154985,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"1xm1naz",{"filePath":"21","messages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"20"},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"20"},{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"20"},{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34"},{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/gaspar/Desktop/Work/Assignments/Brandweb-test/src/index.js",[],["39","40"],"/Users/gaspar/Desktop/Work/Assignments/Brandweb-test/src/App.js",[],"/Users/gaspar/Desktop/Work/Assignments/Brandweb-test/src/Components/MainPage.js",["41","42","43"],"import React, { useEffect, useState } from 'react';\nimport { Link } from \"react-router-dom\"\nimport axios from \"axios\"\nimport {\n    Button,\n    Container,\n    Row,\n    Col,\n    Card,\n    Pagination\n} from \"react-bootstrap\"\n\nfunction MainPage() {\n    const [gameCards, setGameCards] = useState([])\n    const [page, setPage] = useState(1)\n\n    //I should use usememo here maybe?\n    const fetchCards = async (page) => {\n        setGameCards([])\n        await axios.get(`http://localhost:8080/games/query?page=${page}&limit=${6}`)\n            .then(res => {\n                setGameCards(...gameCards, res.data)\n            }).catch(e => {\n                console.log(e)\n            })\n    }\n\n    const handlePageChange = (value) => {\n        //e.preventDefault()\n        setPage(value)\n    }\n\n    useEffect(() => {\n        fetchCards(page)\n    }, [page]);\n\n\n\n    return (\n        <Container>\n            <h1>Games</h1>\n            <Row xxl={7} xl={4} lg={4} md={3} sm={2} style={{ marginBottom: \"2vh\" }}>\n                {\n                    gameCards.length > 0 ? gameCards.map((game) => {\n\n                        return (\n                            <Col alt=\"columns\" key={game.id} style={{ marginBottom: \"1rem\" }} >\n                                <Card style={{\n                                    minWidth: \"10vh\",\n                                    width: \"100%\",\n                                    marginBottom: \"1rem\",\n                                    maxHeight: \"68vh\",\n                                    height: \"100%\"\n                                }}>\n                                    <Card.Img alt=\"Game background\" variant=\"top\" style={{ minHeight: \"20vh\", minWidth: \"24vh\", maxHeight: \"22vh\", width: \"100%\" }} src={game.background_image} alt=\"Game image\" />\n                                    <Card.Body alt=\"Body\" style={{ alignItems: \"space-between\", display: \"grid\" }}>\n                                        <h5 className=\"card-title\">{game.name}</h5>\n                                        <Card.Text alt=\"Game's rating\" className=\"card-text\">Rating: {game.rating}</Card.Text>\n                                        <Card.Text style={{ display: \"flex\", height: \"100%\", flexWrap: \"wrap\" }}>\n                                            {game[\"genres\"].map((genre) => {\n                                                return <span style={{\n                                                    background: \"lightgrey\",\n                                                    width: \"min-content\",\n                                                    margin: \"0px 5px 4px 0px\",\n                                                    borderRadius: \"5px\",\n                                                    height: \"min-content\",\n                                                    padding: \"2px 4px 2px 4px\",\n                                                    flexWrap: \"wrap\"\n                                                }} key={genre.id}>{genre.name}</span>\n                                            })}\n                                        </Card.Text>\n                                        <Card.Text alt=\"Card text\" style={{ fontSize: \"0.8rem\", color: \"grey\" }}>Last updated: {game.updated.slice(0, 10)}</Card.Text>\n                                        <Card.Text >{game.description}</Card.Text>\n                                        <Card.Body >\n                                            <Link className=\"link-btn\" key={game._id} to=\"/game\" state={{\n                                                id: game.id\n                                            }}>See details</Link>\n                                        </Card.Body>\n                                    </Card.Body>\n                                </Card>\n                            </Col>\n                        )\n                    }) : null\n                }\n            </Row>\n            <p>This pagination below here doesn't work yet....</p>\n            <Pagination style={{ justifyContent: \"center\", marginTop: \"10vh\" }}>\n\n                <Pagination.First alt=\"First page\" />\n                <Pagination.Prev alt=\"Prev page\" />\n                {gameCards.length > 0 ? gameCards.map((page, index) => {\n                    return <Pagination.Item alt=\"Page selection\" value={index + 1} key={index + 1} onClick={(e) => {\n                        handlePageChange(index + 1)\n                    }}>{index + 1}</Pagination.Item>\n                }) : null}\n                <Pagination.Next alt=\"next page\" />\n                <Pagination.Last alt=\"Last page\" />\n            </Pagination>\n        </Container>\n    )\n}\n\nexport default MainPage;\n","/Users/gaspar/Desktop/Work/Assignments/Brandweb-test/src/Components/Navbar.js",["44","45"],"import React from 'react'\nimport { InputForm, Form } from 'react-bootstrap'\nimport { NavLink } from 'react-router-dom'\nimport \"./Navbar.css\"\nimport SearchBar from './SearchBar'\n\nfunction Navbar() {\n    return (\n        <div>\n            <nav className=\"navbar\">\n                <div className=\"navbar-container\">\n                    <NavLink to=\"/\" className=\"nav-logo\">\n                        Brandweb\n                    </NavLink>\n                    <ul className=\"nav-menu\">\n                        <li className=\"nav-item\">\n                            <SearchBar placeholder=\"Look up a game\" />\n                        </li>\n                    </ul>\n                </div>\n            </nav>\n\n        </div>\n    )\n}\n\nexport default Navbar","/Users/gaspar/Desktop/Work/Assignments/Brandweb-test/src/Components/SearchBar.js",["46","47"],"import React, { useState, useEffect } from 'react';\nimport { Link } from \"react-router-dom\"\nimport { Container, Form, FormControl } from 'react-bootstrap';\nimport axios from \"axios\"\nimport \"./SearchBar.css\"\nimport { faSearch } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nfunction SearchBar({ placeholder }) {\n\n    const [results, setResults] = useState([])\n    const [input, setInput] = useState([])\n\n    //I should use usememo here\n    const fetchSearchQueries = async () => {\n        await axios.get('http://localhost:8080/games/names')\n            .then(res => {\n                setResults(...results, res.data)\n            }).catch(e => {\n                console.log(e)\n            })\n    }\n\n    const handleFiltering = (e) => {\n        const searchWord = e.target.value\n        const filter = results.filter((value) => {\n            return value.name.toLowerCase().includes(searchWord.toLowerCase())\n        })\n\n        if (searchWord === 0 || null) {\n            setInput([])\n        } else {\n            setInput(filter)\n        }\n\n        console.log(searchWord)\n    }\n\n\n\n\n    useEffect(() => {\n        fetchSearchQueries()\n    }, [])\n    return (\n        <Container>\n            <Container style={{ display: \"flex\" }}>\n                <Form.Label htmlFor=\"Searchbar\" />\n                <Form.Control\n                    type=\"text\"\n                    id=\"search-query\"\n                    placeholder={placeholder}\n                    onChange={(e) => { handleFiltering(e) }}\n                />\n                <FormControl.Feedback>\n                    <FontAwesomeIcon icon={faSearch} />\n                </FormControl.Feedback>\n\n            </Container>\n            {input.length > 0 ?\n                <Container className=\"search-results\">\n                    {input.length != 0 ? input.map((game) => {\n                        return (\n                            <Link className=\"result-item\" key={game._id} to='/game' state={{\n                                id: game.id\n                            }} >{game.name}</Link>\n\n                        )\n\n                    }) : null}\n                </Container>\n                : null}\n\n\n\n        </Container>\n    )\n\n}\n\nexport default SearchBar;\n","/Users/gaspar/Desktop/Work/Assignments/Brandweb-test/src/Components/DetailedView.js",["48","49","50"],"import React, { useEffect, useState } from 'react';\nimport axios from \"axios\"\nimport {\n    Button,\n    Container,\n    Row,\n    Col,\n} from \"react-bootstrap\"\nimport { useLocation } from 'react-router';\nimport { API_KEY } from \"../env\"\n\nfunction DetailedView() {\n    const [gameData, setGameData] = useState([])\n\n    const location = useLocation()\n    const { id } = location.state\n\n    const fetchDetailedData = async (id) => {\n        await axios.get(`https://api.rawg.io/api/games/${id}?key=${API_KEY}`)\n            .then(res => {\n                setGameData(...gameData, res.data)\n            }).catch(e => {\n                console.log({ message: e })\n            })\n    }\n\n    const platforms = gameData.metacritic_platforms\n    const ratings = gameData.ratings\n    const developers = gameData.developers\n    const genres = gameData.genres\n    const tags = gameData.tags\n\n    console.log(id)\n\n    useEffect(() => {\n        fetchDetailedData(id)\n    }, [location])\n\n    return (\n        <Container>\n            <Row>\n                <Col sm={{ width: \"50%\", height: \"50%\" }} md={{ width: \"20%\", height: \"20%\" }} style={{ width: \"80\", heigth: \"50%\", marginBottom: \"40px\" }}>\n                    <img style={{ width: \"80%\", height: \"80%\" }} src={gameData.background_image} alt=\"Game's background picture\" />\n                    <Row style={{ marginTop: \"20px\", height: \"min-content\", display: \"flex\" }}>\n                        {tags ? tags.map(tag => {\n                            return <p style={{\n                                fontSize: \"10px\",\n                                height: \"min-content\",\n                                borderRadius: \"5px\",\n                                padding: \"5px\",\n                                marginRight: \"5px\",\n                                backgroundColor: \"lightgrey\",\n                                width: \"max-content\"\n                            }} >{tag.name}</p>\n                        }) : null}\n                    </Row>\n                </Col>\n                <Col>\n                    <Container>\n                        <h1>{gameData.name}</h1>\n                        <Row>\n                            <Col>\n                                <Container>\n                                    <p>Released: {gameData.released} by {developers ? developers.map((dev, index) => {\n                                        return dev.name\n                                    }) : null}</p>\n                                    <h3>Genres</h3>\n                                    <Container style={{ display: \"flex\", flexWrap: \"wrap\" }}>\n                                        {genres ? genres.map((genre) => {\n                                            return <p style={{\n                                                borderRadius: \"5px\",\n                                                padding: \"5px\",\n                                                marginRight: \"5px\",\n                                                backgroundColor: \"lightgrey\",\n                                                width: \"min-content\",\n                                                display: \"flex\"\n                                            }}>{genre.name}</p>\n                                        }) : null}\n                                    </Container>\n                                </Container>\n                            </Col>\n                            <Col>\n                                <Container>\n                                    <h4>Metacritic ratings</h4>\n                                    <p><strong>Overall: </strong>{gameData.metacritic}</p>\n                                    <ul key=\"unordered list\">\n                                        {platforms ? platforms.map((platform) => {\n                                            return <li key={platform.id}>{platform.platform.name}: {platform.metascore}</li>\n                                        }) : <div>No platforms yet</div>}\n                                    </ul>\n                                    <h5>Overall rating: {gameData.rating}</h5>\n                                    {\n                                        ratings ? ratings.map((rating) => {\n                                            return (\n                                                <Container>\n                                                    <p key={rating.id}><strong>{rating.title}:</strong> {rating.count}</p><p><strong>Percent:</strong> {rating.percent}%</p>\n                                                </Container>)\n\n                                        }) : <p>No ratings yet :(</p>\n                                    }\n                                </Container>\n                            </Col>\n                        </Row>\n                    </Container>\n                </Col>\n            </Row>\n            <Row style={{ maxWidth: \"50%\" }}>\n                <Col>\n                    <h1>Description</h1>\n                    {gameData.description_raw}\n                    <a href={gameData.website}>Read more on their website</a>\n                </Col>\n            </Row>\n        </Container>\n    );\n}\n\nexport default DetailedView;\n","/Users/gaspar/Desktop/Work/Assignments/Brandweb-test/src/env.js",[],"/Users/gaspar/Desktop/Work/Assignments/Brandweb-test/src/Components/Footer.js",["51","52","53"],{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","severity":1,"message":"59","line":5,"column":5,"nodeType":"60","messageId":"61","endLine":5,"endColumn":11},{"ruleId":"62","severity":1,"message":"63","line":35,"column":8,"nodeType":"64","endLine":35,"endColumn":14,"suggestions":"65"},{"ruleId":"66","severity":1,"message":"67","line":55,"column":193,"nodeType":"68","messageId":"69","endLine":55,"endColumn":209},{"ruleId":"58","severity":1,"message":"70","line":2,"column":10,"nodeType":"60","messageId":"61","endLine":2,"endColumn":19},{"ruleId":"58","severity":1,"message":"71","line":2,"column":21,"nodeType":"60","messageId":"61","endLine":2,"endColumn":25},{"ruleId":"62","severity":1,"message":"72","line":44,"column":8,"nodeType":"64","endLine":44,"endColumn":10,"suggestions":"73"},{"ruleId":"74","severity":1,"message":"75","line":62,"column":35,"nodeType":"76","messageId":"77","endLine":62,"endColumn":37},{"ruleId":"58","severity":1,"message":"59","line":4,"column":5,"nodeType":"60","messageId":"61","endLine":4,"endColumn":11},{"ruleId":"62","severity":1,"message":"78","line":37,"column":8,"nodeType":"64","endLine":37,"endColumn":18,"suggestions":"79"},{"ruleId":"80","severity":1,"message":"81","line":43,"column":21,"nodeType":"82","endLine":43,"endColumn":132},{"ruleId":"58","severity":1,"message":"70","line":2,"column":10,"nodeType":"60","messageId":"61","endLine":2,"endColumn":19},{"ruleId":"58","severity":1,"message":"71","line":2,"column":21,"nodeType":"60","messageId":"61","endLine":2,"endColumn":25},{"ruleId":"58","severity":1,"message":"83","line":5,"column":8,"nodeType":"60","messageId":"61","endLine":5,"endColumn":17},"no-native-reassign",["84"],"no-negated-in-lhs",["85"],"no-unused-vars","'Button' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchCards'. Either include it or remove the dependency array.","ArrayExpression",["86"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","noDuplicateProps","'InputForm' is defined but never used.","'Form' is defined but never used.","React Hook useEffect has a missing dependency: 'fetchSearchQueries'. Either include it or remove the dependency array.",["87"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","React Hook useEffect has missing dependencies: 'fetchDetailedData' and 'id'. Either include them or remove the dependency array.",["88"],"jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","'SearchBar' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"89","fix":"90"},{"desc":"91","fix":"92"},{"desc":"93","fix":"94"},"Update the dependencies array to be: [fetchCards, page]",{"range":"95","text":"96"},"Update the dependencies array to be: [fetchSearchQueries]",{"range":"97","text":"98"},"Update the dependencies array to be: [fetchDetailedData, id, location]",{"range":"99","text":"100"},[843,849],"[fetchCards, page]",[1204,1206],"[fetchSearchQueries]",[956,966],"[fetchDetailedData, id, location]"]